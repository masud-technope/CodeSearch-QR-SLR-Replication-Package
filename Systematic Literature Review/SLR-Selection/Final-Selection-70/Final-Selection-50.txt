a noun-based approach to feature location using time-aware term-weighting
a search log mining based query expansion technique to improve effectiveness in code search
a test-driven approach to code search and its application to the reuse of auxiliary functionality
*active code search: incorporating user feedback to improve code search relevance
*assisting code search with automatic query reformulation for bug localization
*augmenting and structuring user queries to support efficient free-form code search
*automatic query performance assessment during the retrieval of software artifacts
automatic query reformulations for feature location in a model-based family of software products
*automatic query reformulations for text retrieval in software engineering
*automatic search term identification for change tasks
*automatically capturing source code context of nl-queries for software maintenance and reuse
can the use of types and query expansion help improve large-scale code search?
code search with input/output queries: generalizing, ranking, and assessment
*codeexchange: supporting reformulation of internet-scale code queries in context
*codehow: effective code search based on api understanding and extended boolean model
conclave: ontology-driven measurement of semantic relatedness between source code elements and problem domain concepts
correlation-based software search by leveraging software term database
*design and evaluation of a multi-recommendation system for local code search
discovering remote software services that satisfy requirements - patterns for query reformulation.
*effective reformulation of query for code search using crowdsourced knowledge and extra-large data analytics
*expanding queries for code search using semantically related api class-names
*exploiting spatial code proximity and order for improved source code retrieval for bug localization
impact of structural weighting on a latent dirichlet allocation–based feature location technique
*improved query reformulation for concept location using coderank and document structures
improving feature location by transforming the query from natural language into requirements
*improving ir-based bug localization with context-aware query reformulation
*improving software text retrieval using conceptual knowledge in source code
*inferring semantically related words from software context
*on the effect of the query in ir-based concept location
*on the reduction of verbose queries in text retrieval based software maintenance
on the use of positional proximity in ir-based feature location
*on the use of relevance feedback in ir-based concept location
precise and scalable querying of syntactical source code patterns using sample code snippets and a database
*predicting query quality for applications of text retrieval to software engineering tasks
query by example in large-scale code repositories
*query expansion based on crowd knowledge for code search
query expansion based on statistical learning from code changes
query expansion via wordnet for effective code search
*query reformulation by leveraging crowd wisdom for scenario-based software search
*quickar : automatic query reformulation for concept location using crowdsourced knowledge
*rack: automatic api recommendation using crowdsourced knowledge
*strict: information retrieval based search term identification for concept location
swim: synthesizing what i mean: code search and idiomatic snippet synthesis
*swordnet: inferring semantically related words from software context
thesaurus-based automatic query expansion for interface-driven code search
typestate-based semantic code search over partial programs
*using natural language program analysis to locate and understand action-oriented concerns
*using observed behavior to reformulate queries during text retrieval-based bug localization
Structural information based term weighting in text retrieval for feature location
using thesaurus-based tag clouds to improve test-driven code search
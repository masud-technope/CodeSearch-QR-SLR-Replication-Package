bad-identifier-naming-practices,low-quality-bug-reports,POS-tagger's-training-bias,misclassified-POS,OSS vs closed source generalization,Java specfici systems,small dataset
dimensionality reduction issue,small dataset,,,,,
lack of usability,extra burden of test case generation,small code/feature size,,,,
developer bias in relevance,small dataset,,,,,
vocabulary mismatch problem,low quality query issue,,,,,
too many parameter tuning,biased queries for direct linking,,,,,
small dataset (20 queries),noisy/low quality query issue,potential noise,redundant API classes,,,
small dataset,lack of user queries,one TR engine only,insensitive to bug report structures,,,
weak fitness function,possibly wrong assumption of relevance,mode-code differences not reflected on the approach,,,,
small dataset,single TR engine only,imbalance training data,,,,
small dataset,lack of validation,lack of generalizability,unstable LR model,,,
subjectivity in query selection,extra burden on developers,lack of validation (empirical),term co-occurrence as relevance not validated empirically,,,
small dataset,lack of appropriate metric, MAP. Only tested Hit@K and Recall.,extra burden on developers,,,,
bad identifier naming practices,full dependence on corpus,weak proxy of relevance,inappropriate for cross-domain projects,potential noise,,
biased towards expert developers,subjectivity in relevance,small dataset,vocabulary mismatch problem,,,
small dataset,subjectivity in relevance,software project naming ambiguity,,,,
extra burden on developers,subjectivity in relevance,choice of initial query issue,subject to developer expertise,insufficient recommendation,,
lack of empirical evaluation,,,,,,
small dataset/corpus,Java specific systems,potential noise in candidate APIs,,,,
query and API both from source code,low quality query issue,potential noise in candidate APIs,,,,
biased queries for direct linking,,,,,,
java specific systems,bias with data resampling,lack of scalability,potentially unfair comparison,,,
potential noise in query,lack of generalizability,subject to requirement -to -product oracle.,outdated requirements,,,
lack of generalizability,potential information overload,subjectivity in determining equivalent groups,developer involvement warranted in query reformulation,,,
regex based classification,potential misclassification of bug reports,less impact on BR_NL,lack of generalizability,,,
issue with MAP calculation,subjectivity in relevance,vocabulary mismatch problem,TF-IDF based API entity weighting,pairwise API similarity matching, is it the best way?,,
small dataset for queries/code search,software documentation warranted,subject to documentation quality,hard coded thresholds for contexts,subjectivity in relevance,lack of semantic classification,
java specific systems,software documentation warranted,subject to documentation quality,subjectivity in relevance,lack of evaluation in application,,
impractical for use,query verbosity,developer feedback warranted,,,,
small dataset,developer feedback warranted,subjectivity in relevance,time consuming,,,
extra burden on developers,code segment as query,lack of generalizability,lack of statistical significance,,,
semantic agnostic approach,lack of novelty,one TR engine only,binary classifcation of quality,potentially high costs,,
extra burden on developers,small dataset,potentially high costs for AST,,,,
subjectivity in goldset,small dataset,potential noise in candidate terms,lack of generalizability,replication bias,parameter config issues,
counter-intuitive motivation,possible model overfitting,small dataset,subject to code change history,close corpus assumption,potential noise in term selection,
NL-to-code semantic issues,small dataset,POS tagger's training bias,potential noise in terms,,,
small dataset for queries/code search,subject to SO tags,limited to software search,weak empirical evaluation,,,
potential noise in query,infeasible semantic similarity calculation,potential bias in evaluation,source terms > SO terms,,,
potential noise in extended query,potential bias in evaluation,noisy query for code search,lack of generalizability,,,
POS tagging issues,lack of generalizability,difficulty with noisy queries,,,,
small dataset for queries/code search,noisy/irrelevant code segments,P(t/q) : unigram could be noisy,query keyword independence might not hold,,,
precision not reported,small dataset for queries/code search,potential noise in query,limited to small queries,limited to auxiliary tasks,,
human bias in goldset,lack of generalizability,extra burden on developers,V-DO does not apply always,small dataset in query,,
lack of reproducibility,weak theory behind OB for QR,bias during sentence labeling,potential noise in query,,,
potential noise from task contexts,inappropriate comparison,small dataset in testing,potential bias in evaluation,limited to existing code elements only,,
vocabulary mismatch problem,lack of benchmark,lack of generalizability,config and evaluation bias,issues with low quality queries,,
extra burden on developers,learning curve in query ,training bias,lack of generalizability,small dataset,,
ginseng-guided query,subject to semantic web engine,some learning curve,high complexity,restricted query patterns,,
limited to single entities only,might fail with nested entities,lack of generalizability,warrant up-front re-documentation of code,,,
curse of dimensionality,small dataset for queries/code search,vocabulary mismatch problem,potential noise in query,,,
potential noise in query,subject to search engines,lack of generalizability,no automatic detection of hard to trace queries,assumption of relevant web results,lexical similarity between query and chunk might not be an ideal approach,
lack of generalizability,small dataset,bias in goldset links,,,,
well designed query needed,restricted to underlying ontology,suggested queries could be complex to understand,vocabulary mismatch problem,high cost of ontology construction from multiple domains,,
no best config provided,potential noise in query,potentiall infeasible for practical use due to high cost of training,lack of generalizability,,,
might be noisy for mutliple types per statement,non-substantiated assumptions,irrelevant statements = dissimilar acorss segments,relevant segment = frequent segment acorss corpus,small dataset in query,might only work for popular topics,
extra burden on developers,subject to given code examples,subject to graph-mining method,small dataset in query,,,
lack of generalizability,open-source-project-only,issues-with-SZZ-bug-linking,bad-identifier-naming-practices,low quality bug report,bug-chronology-not-respected,
potential noise in query,biased queries for direct linking,lack-of-appropriate-validation,,,,
lack of generalizability,small dataset,low-quality-query-issue,,,,
small dataset,one-subject-system-only,lack of generalizability,lack of appropriate baselines,specific-to-java-systems-only,,
subject-to-availability-of-attachment,regular-expression-is-error-prone,regular-expression-is-costly,,,,
genetic-algorithm-costly,not-a-perfect-fitness-function,multi-objective-optimization,cost-benefit-analysis-needed,,,
out-of-vocabulary-issue,costly-AST-creation,text-based-code-similarity,false-positive-code-labeling,,,
lack-of-popular-metrics,parameter-calibration-not-rigorous,lack-of-generalizability,subject-to-vocabulary-mismatch-problem,,,
small-dataset,lack-of-theoretical-support,intent-from-change-terms-unorthodox,limited-evaluation-validation,,,
lack-of-popular-baseline,subject-to-proprietary-dataset,hard-to-replicate-or-reproduce,,,,
need-to-know-ground-truth,,,,,,
need-to-know-ground-truth,,,,,,
lack-of-popular-metrics,lack of generalizability,,,,,
potential-noise-in-the-explanation,potential-for-noisy-query-keywords,,,,,